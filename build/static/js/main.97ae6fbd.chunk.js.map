{"version":3,"sources":["images/pasta01.jpg","images/pasta02.jpg","images/pasta03.jpg","images/pasta04.jpg","images/pasta05.jpg","images/pasta06.jpg","images/pasta07.jpg","images/pasta08.jpg","images/pasta09.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pastaimg","url","onClick","className","src","App","useState","clicked","score","setScore","topScore","setTopScore","pasta01","pasta02","pasta03","pasta04","pasta05","pasta06","pasta07","pasta08","pasta09","images","updateScore","image","array","i","length","j","Math","floor","random","shuffle","includes","push","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,2TC2F3C,SAASC,EAAT,GAAqC,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,QACvB,OAAO,yBAAKC,UAAU,WAAWC,IAAKH,EAAKC,QAAS,kBAAMA,EAAQD,MAGrDI,MAnFf,WAAe,MAcKC,mBAAS,IAApBC,EAdM,sBAeaD,mBAAS,GAftB,mBAeNE,EAfM,KAeCC,EAfD,OAgBmBH,mBAAS,GAhB5B,mBAgBNI,EAhBM,KAgBIC,EAhBJ,OAiBIL,mBAAS,CACxBM,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,MATKC,EAjBM,oBA4BPC,EAAc,SAAAC,IA3BpB,SAAiBC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAQlB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GARkC,KAQ9BD,EAAMG,GARwB,MA2B3CI,CAAQV,GAEJd,EAAQyB,SAAST,IACnBhB,EAAQmB,OAAS,EACjBjB,EAAS,KAETA,EAASD,EAAQ,GACbA,EAAQE,GACVC,EAAYH,GAEdD,EAAQ0B,KAAKV,KAIjB,OACE,yBAAKpB,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,SAAf,gBACA,6BACA,yBAAKA,UAAU,YAAf,mBACA,6BACA,yBAAKA,UAAU,iBAAf,qCACoC,6BADpC,2CAKA,6BAEA,yBAAKA,UAAU,iBAAf,4BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,yBAAKA,UAAU,gBAAf,WAAuCK,GACvC,6BACA,yBAAKL,UAAU,YAAf,eAAuCO,IAEzC,yBAAKP,UAAU,eACZkB,EAAOa,IAAI,SAAAX,GAAK,OACf,kBAACvB,EAAD,CAAUmC,IAAKZ,EAAOtB,IAAKsB,EAAOrB,QAASoB,SCxEjCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.97ae6fbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pasta01.0b474d3f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta02.50989357.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta03.14c32026.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta04.0bfee7a5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta05.9d6019d8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta06.647e2d3b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta07.78a8685b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta08.e39db562.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pasta09.a6f8c083.jpg\";","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport pasta01 from \"./images/pasta01.jpg\";\nimport pasta02 from \"./images/pasta02.jpg\";\nimport pasta03 from \"./images/pasta03.jpg\";\nimport pasta04 from \"./images/pasta04.jpg\";\nimport pasta05 from \"./images/pasta05.jpg\";\nimport pasta06 from \"./images/pasta06.jpg\";\nimport pasta07 from \"./images/pasta07.jpg\";\nimport pasta08 from \"./images/pasta08.jpg\";\nimport pasta09 from \"./images/pasta09.jpg\";\n\nfunction App() {\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n      // swap elements array[i] and array[j]\n      // we use \"destructuring assignment\" syntax to achieve that\n      // you'll find more details about that syntax in later chapters\n      // same can be written as:\n      // let t = array[i]; array[i] = array[j]; array[j] = t\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  const [clicked] = useState([]);\n  const [score, setScore] = useState(0);\n  const [topScore, setTopScore] = useState(0);\n  const [images] = useState([\n    pasta01,\n    pasta02,\n    pasta03,\n    pasta04,\n    pasta05,\n    pasta06,\n    pasta07,\n    pasta08,\n    pasta09\n  ]);\n  const updateScore = image => {\n    shuffle(images);\n\n    if (clicked.includes(image)) {\n      clicked.length = 0;\n      setScore(0);\n    } else {\n      setScore(score + 1);\n      if (score > topScore) {\n        setTopScore(score);\n      }\n      clicked.push(image);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"left\">\n        <div className=\"title\">DOGGIRONCINO</div>\n        <br />\n        <div className=\"subTitle\">- CLICKY GAME -</div>\n        <br />\n        <div className=\"instruction01\">\n          Click on an image to earn points, <br /> but don't click on any more\n          than once!\n        </div>\n\n        <br />\n\n        <div className=\"instruction02\">Click an image to begin!</div>\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <div className=\"currentScore\">SCORE : {score}</div>\n        <br />\n        <div className=\"topScore\">TOP SCORE : {topScore}</div>\n      </div>\n      <div className=\"title right\">\n        {images.map(image => (\n          <Pastaimg key={image} url={image} onClick={updateScore} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Pastaimg({ url, onClick }) {\n  return <img className=\"pastabox\" src={url} onClick={() => onClick(url)} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}